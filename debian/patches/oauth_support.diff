--- res_xmpp.c.orig	2016-10-12 09:18:30.050311280 -0400
+++ res_xmpp.c	2016-10-12 09:23:44.799365117 -0400
@@ -5,6 +5,21 @@
  *
  * Joshua Colp <jcolp@digium.com>
  *
+ * Modified by carib8 on DSL Reports to provide OAUTH support
+ * See the forum posts for details: http://nerd.bz/1Dr5e9B
+ * res_xmpp.c for Asterisk 13: http://nerd.bz/1Dr5sNN
+ *
+ * Further July, 2015 mods by Ward Mundy & Associate LLC with
+ * embedded Incredible PBX OAuth Client ID and Secret shown below
+ * Client ID: 466295438629-prpknsovs0b8gjfcrs0sn04s9hgn8j3d.apps.googleusercontent.com
+ * Client Secret: 4ewzJaCx275clcT4i4Hfxqo2
+ *
+ * Copy this file into Asterisk 13 /res directory. Then, cd.. and
+ * Recompile Asterisk: make && make install && amportal restart
+ *
+ * To activate new Google Voice trunks using OAUTH credentials,
+ * proceed at Step #2 using this tutorial: http://nerd.bz/1JaO4ij
+ *
  * See http://www.asterisk.org for more information about
  * the Asterisk project. Please do not directly contact
  * any of the maintainers of this project for assistance;
@@ -27,7 +42,7 @@
  * A reference module for interfacting Asterisk directly as a client or component with
  * an XMPP/Jabber compliant server.
  *
- * This module is based upon the original res_jabber as done by Matt O'Gorman.
+ * This module is based upon the original res_jabber and res_xmpp as done by Matt O'Gorman.
  *
  */
 
@@ -48,8 +63,6 @@
 
 #include "asterisk.h"
 
-ASTERISK_REGISTER_FILE()
-
 #include <ctype.h>
 #include <iksemel.h>
 
@@ -61,16 +74,17 @@
 #include "asterisk/manager.h"
 #include "asterisk/cli.h"
 #include "asterisk/config_options.h"
+#include "asterisk/json.h"
 
 /*** DOCUMENTATION
-	<application name="JabberSend" language="en_US" module="res_xmpp">
+	<application name="JabberSend" language="en_US" module="res_xmpp_oauth">
 		<synopsis>
 			Sends an XMPP message to a buddy.
 		</synopsis>
 		<syntax>
 			<parameter name="account" required="true">
 				<para>The local named account to listen on (specified in
-				xmpp.conf)</para>
+				xmpp_oauth.conf)</para>
 			</parameter>
 			<parameter name="jid" required="true">
 				<para>Jabber ID of the buddy to send the message to. It can be a
@@ -86,21 +100,21 @@
 			<replaceable>jid</replaceable></para>
 			<para>Example: JabberSend(asterisk,bob@domain.com,Hello world) sends "Hello world"
 			to <replaceable>bob@domain.com</replaceable> as an XMPP message from the account
-			<replaceable>asterisk</replaceable>, configured in xmpp.conf.</para>
+			<replaceable>asterisk</replaceable>, configured in xmpp_oauth.conf.</para>
 		</description>
 		<see-also>
-			<ref type="function" module="res_xmpp">JABBER_STATUS</ref>
-			<ref type="function" module="res_xmpp">JABBER_RECEIVE</ref>
+			<ref type="function" module="res_xmpp_oauth">JABBER_STATUS</ref>
+			<ref type="function" module="res_xmpp_oauth">JABBER_RECEIVE</ref>
 		</see-also>
 	</application>
-	<function name="JABBER_RECEIVE" language="en_US" module="res_xmpp">
+	<function name="JABBER_RECEIVE" language="en_US" module="res_xmpp_oauth">
 		<synopsis>
 			Reads XMPP messages.
 		</synopsis>
 		<syntax>
 			<parameter name="account" required="true">
 				<para>The local named account to listen on (specified in
-				xmpp.conf)</para>
+				xmpp_oauth.conf)</para>
 			</parameter>
 			<parameter name="jid" required="true">
 				<para>Jabber ID of the buddy to receive message from. It can be a
@@ -115,21 +129,21 @@
 			from the buddy identified by <replaceable>jid</replaceable> and returns the contents.</para>
 			<para>Example: ${JABBER_RECEIVE(asterisk,bob@domain.com)} returns an XMPP message
 			sent from <replaceable>bob@domain.com</replaceable> (or nothing in case of a time out), to
-			the <replaceable>asterisk</replaceable> XMPP account configured in xmpp.conf.</para>
+			the <replaceable>asterisk</replaceable> XMPP account configured in xmpp_oauth.conf.</para>
 		</description>
 		<see-also>
-			<ref type="function" module="res_xmpp">JABBER_STATUS</ref>
-			<ref type="application" module="res_xmpp">JabberSend</ref>
+			<ref type="function" module="res_xmpp_oauth">JABBER_STATUS</ref>
+			<ref type="application" module="res_xmpp_oauth">JabberSend</ref>
 		</see-also>
 	</function>
-	<function name="JABBER_STATUS" language="en_US" module="res_xmpp">
+	<function name="JABBER_STATUS" language="en_US" module="res_xmpp_oauth">
 		<synopsis>
 			Retrieves a buddy's status.
 		</synopsis>
 		<syntax>
 			<parameter name="account" required="true">
 				<para>The local named account to listen on (specified in
-				xmpp.conf)</para>
+				xmpp_oauth.conf)</para>
 			</parameter>
 			<parameter name="jid" required="true">
 				<para>Jabber ID of the buddy to receive message from. It can be a
@@ -145,14 +159,14 @@
 			<para>If not in roster variable will be set to 7.</para>
 			<para>Example: ${JABBER_STATUS(asterisk,bob@domain.com)} returns 1 if
 			<replaceable>bob@domain.com</replaceable> is online. <replaceable>asterisk</replaceable> is
-			the associated XMPP account configured in xmpp.conf.</para>
+			the associated XMPP account configured in xmpp_oauth.conf.</para>
 		</description>
 		<see-also>
-			<ref type="function" module="res_xmpp">JABBER_RECEIVE</ref>
-			<ref type="application" module="res_xmpp">JabberSend</ref>
+			<ref type="function" module="res_xmpp_oauth">JABBER_RECEIVE</ref>
+			<ref type="application" module="res_xmpp_oauth">JabberSend</ref>
 		</see-also>
 	</function>
-	<application name="JabberSendGroup" language="en_US" module="res_xmpp">
+	<application name="JabberSendGroup" language="en_US" module="res_xmpp_oauth">
 		<synopsis>
 			Send a Jabber Message to a specified chat room
 		</synopsis>
@@ -175,7 +189,7 @@
 			<note><para>To be able to send messages to a chat room, a user must have previously joined it. Use the <replaceable>JabberJoin</replaceable> function to do so.</para></note>
 		</description>
 	</application>
-	<application name="JabberJoin" language="en_US" module="res_xmpp">
+	<application name="JabberJoin" language="en_US" module="res_xmpp_oauth">
 		<synopsis>
 			Join a chat room
 		</synopsis>
@@ -195,7 +209,7 @@
 			<para>Allows Asterisk to join a chat room.</para>
 		</description>
 	</application>
-	<application name="JabberLeave" language="en_US" module="res_xmpp">
+	<application name="JabberLeave" language="en_US" module="res_xmpp_oauth">
 		<synopsis>
 			Leave a chat room
 		</synopsis>
@@ -214,7 +228,7 @@
 			<para>Allows Asterisk to leave a chat room.</para>
 		</description>
 	</application>
-	<application name="JabberStatus" language="en_US" module="res_xmpp">
+	<application name="JabberStatus" language="en_US" module="res_xmpp_oauth">
 		<synopsis>
 			Retrieve the status of a jabber list member
 		</synopsis>
@@ -258,7 +272,7 @@
 			</enumlist>
 		</description>
 	</application>
-	<manager name="JabberSend" language="en_US" module="res_xmpp">
+	<manager name="JabberSend" language="en_US" module="res_xmpp_oauth">
 		<synopsis>
 			Sends a message to a Jabber Client.
 		</synopsis>
@@ -284,12 +298,12 @@
 	</info>
 	<info name="XMPPMessageFromInfo" language="en_US" tech="XMPP">
 		<para>Specifying a prefix of <literal>xmpp:</literal> will specify the
-		account defined in <literal>xmpp.conf</literal> to send the message from.
+		account defined in <literal>xmpp_oauth.conf</literal> to send the message from.
 		Note that this field is required for XMPP messages.</para>
 	</info>
-	<configInfo name="res_xmpp" language="en_US">
+	<configInfo name="res_xmpp_oauth" language="en_US">
 		<synopsis>XMPP Messaging</synopsis>
-		<configFile name="xmpp.conf">
+		<configFile name="xmpp_oauth.conf">
 			<configObject name="global">
 				<synopsis>Global configuration settings</synopsis>
 				<configOption name="debug">
@@ -323,6 +337,9 @@
 				<configOption name="secret">
 					<synopsis>XMPP password</synopsis>
 				</configOption>
+				<configOption name="refresh_token">
+					<synopsis>XMPP refresh token</synopsis>
+				</configOption>
 				<configOption name="serverhost">
 					<synopsis>Route to server, e.g. talk.google.com</synopsis>
 				</configOption>
@@ -461,6 +478,7 @@
 		AST_STRING_FIELD(name);        /*!< Name of the client connection */
 		AST_STRING_FIELD(user);        /*!< Username to use for authentication */
 		AST_STRING_FIELD(password);    /*!< Password to use for authentication */
+		AST_STRING_FIELD(refresh_token);    /*!< Password to use for authentication */
 		AST_STRING_FIELD(server);      /*!< Server hostname */
 		AST_STRING_FIELD(statusmsg);   /*!< Status message for presence */
 		AST_STRING_FIELD(pubsubnode);  /*!< Pubsub node */
@@ -470,7 +488,6 @@
 	int message_timeout;            /*!< Timeout for messages */
 	int priority;                   /*!< Resource priority */
 	struct ast_flags flags;         /*!< Various options that have been set */
-	struct ast_flags mod_flags;     /*!< Global options that have been modified */
 	enum ikshowtype status;         /*!< Presence status */
 	struct ast_xmpp_client *client; /*!< Pointer to the client */
 	struct ao2_container *buddies;  /*!< Configured buddies */
@@ -529,6 +546,7 @@
 static ast_mutex_t messagelock;
 
 static int xmpp_client_config_post_apply(void *obj, void *arg, int flags);
+static void fetch_access_token(struct ast_xmpp_client_config *cfg);
 
 /*! \brief Destructor function for configuration */
 static void ast_xmpp_client_config_destructor(void *obj)
@@ -743,6 +761,8 @@
 		goto error;
 	}
 
+	ast_set_flag(&cfg->global->general, XMPP_AUTOREGISTER | XMPP_AUTOACCEPT | XMPP_USETLS | XMPP_USESASL | XMPP_KEEPALIVE);
+
 	if (!(cfg->clients = ao2_container_alloc(1, xmpp_config_hash, xmpp_config_cmp))) {
 		goto error;
 	}
@@ -762,8 +782,8 @@
 	if (ast_strlen_zero(clientcfg->user)) {
 		ast_log(LOG_ERROR, "No user specified on client '%s'\n", clientcfg->name);
 		return -1;
-	} else if (ast_strlen_zero(clientcfg->password)) {
-		ast_log(LOG_ERROR, "No password specified on client '%s'\n", clientcfg->name);
+	} else if (ast_strlen_zero(clientcfg->refresh_token)) {
+		ast_log(LOG_ERROR, "No refresh_token specified on client '%s'\n", clientcfg->name);
 		return -1;
 	} else if (ast_strlen_zero(clientcfg->server)) {
 		ast_log(LOG_ERROR, "No server specified on client '%s'\n", clientcfg->name);
@@ -778,7 +798,7 @@
 
 	/* If any configuration options are changing that would require reconnecting set the bit so we will do so if possible */
 	if (strcmp(clientcfg->user, oldclientcfg->user) ||
-	    strcmp(clientcfg->password, oldclientcfg->password) ||
+	    strcmp(clientcfg->refresh_token, oldclientcfg->refresh_token) ||
 	    strcmp(clientcfg->server, oldclientcfg->server) ||
 	    (clientcfg->port != oldclientcfg->port) ||
 	    (ast_test_flag(&clientcfg->flags, XMPP_COMPONENT) != ast_test_flag(&oldclientcfg->flags, XMPP_COMPONENT)) ||
@@ -822,7 +842,7 @@
 struct aco_type *client_options[] = ACO_TYPES(&client_option);
 
 struct aco_file res_xmpp_conf = {
-	.filename = "xmpp.conf",
+	.filename = "xmpp_oauth.conf",
 	.alias = "jabber.conf",
 	.types = ACO_TYPES(&global_option, &client_option),
 };
@@ -2772,7 +2792,13 @@
 	}
 
 	iks_insert_attrib(auth, "xmlns", IKS_NS_XMPP_SASL);
-	iks_insert_attrib(auth, "mechanism", "PLAIN");
+	//iks_insert_attrib(auth, "mechanism", "PLAIN");
+	// new changes
+	iks_insert_attrib(auth, "mechanism", "X-OAUTH2");
+	iks_insert_attrib(auth, "auth:service", "oauth2");
+	iks_insert_attrib(auth, "xmlns:auth", "http://www.google.com/talk/protocol/auth");
+	/// new changes end
+
 
 	if (strchr(client->jid->user, '/')) {
 		char *user = ast_strdupa(client->jid->user);
@@ -3130,10 +3156,6 @@
 /*! \brief Internal function called when we authenticated as a component */
 static int xmpp_component_authenticating(struct ast_xmpp_client *client, struct ast_xmpp_client_config *cfg, int type, iks *node)
 {
-	if (!strcmp(iks_name(node), "stream:features")) {
-		return 0;
-	}
-
 	if (strcmp(iks_name(node), "handshake")) {
 		ast_log(LOG_ERROR, "Failed to authenticate component '%s'\n", client->name);
 		return -1;
@@ -3309,11 +3331,6 @@
 	int status = pak->show ? pak->show : STATUS_DISAPPEAR;
 	enum ast_device_state state = AST_DEVICE_UNAVAILABLE;
 
-	/* If this is a component presence probe request answer immediately with our presence status */
-	if (ast_test_flag(&cfg->flags, XMPP_COMPONENT) && !ast_strlen_zero(type) && !strcasecmp(type, "probe")) {
-		xmpp_client_set_presence(client, pak->from->full, iks_find_attrib(pak->x, "to"), cfg->status, cfg->statusmsg);
-	}
-
 	/* If no resource is available this is a general buddy presence update, which we will ignore */
 	if (!pak->from->resource) {
 		return 0;
@@ -3328,6 +3345,11 @@
 		return 0;
 	}
 
+	/* If this is a component presence probe request answer immediately with our presence status */
+	if (ast_test_flag(&cfg->flags, XMPP_COMPONENT) && !ast_strlen_zero(type) && !strcasecmp(type, "probe")) {
+		xmpp_client_set_presence(client, pak->from->full, iks_find_attrib(pak->x, "to"), cfg->status, cfg->statusmsg);
+	}
+
 	ao2_lock(buddy->resources);
 
 	if (!(resource = ao2_callback(buddy->resources, OBJ_NOLOCK, xmpp_resource_cmp, pak->from->resource))) {
@@ -3572,12 +3594,12 @@
 	}
 
 	if (client->mwi_sub) {
-		client->mwi_sub = stasis_unsubscribe_and_join(client->mwi_sub);
+		client->mwi_sub = stasis_unsubscribe(client->mwi_sub);
 		xmpp_pubsub_unsubscribe(client, "message_waiting");
 	}
 
 	if (client->device_state_sub) {
-		client->device_state_sub = stasis_unsubscribe_and_join(client->device_state_sub);
+		client->device_state_sub = stasis_unsubscribe(client->device_state_sub);
 		xmpp_pubsub_unsubscribe(client, "device_state");
 	}
 
@@ -3612,6 +3634,10 @@
 		return -1;
 	}
 
+	ast_log(LOG_NOTICE , "Connecting to client token : %s\n" , clientcfg->refresh_token); 
+
+	fetch_access_token(clientcfg);
+
 	ast_xmpp_client_disconnect(client);
 
 	client->timeout = 50;
@@ -3754,12 +3780,12 @@
 
 	do {
 		if (client->state == XMPP_STATE_DISCONNECTING) {
-			ast_debug(1, "JABBER: Disconnecting client '%s'\n", client->name);
+			ast_debug(1, "JABBER: 11 Disconnecting client '%s'\n", client->name);
 			break;
 		}
 
 		if (res == IKS_NET_RWERR || client->timeout == 0) {
-			ast_debug(3, "Connecting client '%s'\n", client->name);
+			ast_debug(1, "111 Connecting client '%s'\n", client->name);
 			if ((res = xmpp_client_reconnect(client)) != IKS_OK) {
 				sleep(4);
 				res = IKS_NET_RWERR;
@@ -3835,17 +3861,45 @@
 	return 1;
 }
 
+static void fetch_access_token(struct ast_xmpp_client_config *cfg) {
+
+	char cmd[4096];
+	char cBuf[4096];
+	const char * url = "https://www.googleapis.com/oauth2/v3/token";
+	const char * client_id = "466295438629-prpknsovs0b8gjfcrs0sn04s9hgn8j3d.apps.googleusercontent.com";
+	const char * client_secret = "4ewzJaCx275clcT4i4Hfxqo2";
+
+	memset(cmd , 0 , sizeof(cmd));
+	snprintf(cmd , sizeof(cmd) - 1 , "CURL(%s,client_id=%s&client_secret=%s&refresh_token=%s&grant_type=refresh_token)" , url, client_id, client_secret, cfg->refresh_token);
+
+	ast_log(LOG_NOTICE , "Command %s\n" , cmd);
+
+	memset(cBuf , 0 , sizeof(cBuf));
+	ast_func_read(NULL, cmd , cBuf , sizeof(cBuf) - 1);
+	ast_log(LOG_NOTICE , "Command status : %s \n" , cBuf);
+	
+	struct ast_json_error error;
+	struct ast_json * jobj = ast_json_load_string(cBuf, &error);
+	if(jobj != NULL) {
+		const char * token = ast_json_string_get(ast_json_object_get(jobj, "access_token"));
+		if(token != NULL) {
+			ast_string_field_set(cfg , password, token);	
+		}
+		ast_log(LOG_NOTICE , "access Token : %s\n", token);
+	}
+	else {
+		ast_log(LOG_ERROR , "object is NULL\n");
+	}
+}
+
 static int xmpp_client_config_post_apply(void *obj, void *arg, int flags)
 {
 	struct ast_xmpp_client_config *cfg = obj;
-	RAII_VAR(struct xmpp_config *, gcfg, ao2_global_obj_ref(globals), ao2_cleanup);
-
-	/* Merge global options that have not been modified */
-	ast_copy_flags(&cfg->flags, &gcfg->global->general, ~(cfg->mod_flags.flags) & (XMPP_AUTOPRUNE | XMPP_AUTOREGISTER | XMPP_AUTOACCEPT));
 
 	/* Merge buddies as need be */
 	ao2_callback(cfg->buddies, OBJ_MULTIPLE | OBJ_UNLINK, xmpp_client_config_merge_buddies, cfg->client->buddies);
 
+
 	if (cfg->client->reconnect) {
 		/* Disconnect the existing session since our role is changing, or we are starting up */
 		ast_xmpp_client_disconnect(cfg->client);
@@ -3868,7 +3922,7 @@
 			cfg->client->jid = iks_id_new(cfg->client->stack, cfg->user);
 		}
 
-		if (!cfg->client->jid || (ast_strlen_zero(cfg->client->jid->user) && !ast_test_flag(&cfg->flags, XMPP_COMPONENT))) {
+		if (!cfg->client->jid || ast_strlen_zero(cfg->client->jid->user)) {
 			ast_log(LOG_ERROR, "Jabber identity '%s' could not be created for client '%s' - client not active\n", cfg->user, cfg->name);
 			return -1;
 		}
@@ -4035,7 +4089,7 @@
 		e->usage =
 			"Usage: xmpp list nodes <connection> [collection]\n"
 			"       Lists the user's nodes on the respective connection\n"
-			"       ([connection] as configured in xmpp.conf.)\n";
+			"       ([connection] as configured in xmpp_oauth.conf.)\n";
 		return NULL;
 	case CLI_GENERATE:
 		return NULL;
@@ -4121,7 +4175,7 @@
 		e->usage =
 			"Usage: xmpp purge nodes <connection> <node>\n"
 			"       Purges nodes on PubSub server\n"
-			"       as configured in xmpp.conf.\n";
+			"       as configured in xmpp_oauth.conf.\n";
 			return NULL;
 	case CLI_GENERATE:
 		return NULL;
@@ -4166,7 +4220,7 @@
 		e->usage =
 			"Usage: xmpp delete node <connection> <node>\n"
 			"       Deletes a node on PubSub server\n"
-			"       as configured in xmpp.conf.\n";
+			"       as configured in xmpp_oauth.conf.\n";
 		return NULL;
 	case CLI_GENERATE:
 		return NULL;
@@ -4203,7 +4257,7 @@
 		e->usage =
 			"Usage: xmpp create collection <connection> <collection>\n"
 			"       Creates a PubSub collection node using the account\n"
-			"       as configured in xmpp.conf.\n";
+			"       as configured in xmpp_oauth.conf.\n";
 		return NULL;
 	case CLI_GENERATE:
 		return NULL;
@@ -4243,7 +4297,7 @@
 		e->usage =
 			"Usage: xmpp create leaf <connection> <collection> <leaf>\n"
 			"       Creates a PubSub leaf node using the account\n"
-			"       as configured in xmpp.conf.\n";
+			"       as configured in xmpp_oauth.conf.\n";
 		return NULL;
 	case CLI_GENERATE:
 		return NULL;
@@ -4518,13 +4572,10 @@
 		ast_set2_flag(&cfg->flags, ast_true(var->value), XMPP_KEEPALIVE);
 	} else if (!strcasecmp(var->name, "autoprune")) {
 		ast_set2_flag(&cfg->flags, ast_true(var->value), XMPP_AUTOPRUNE);
-		ast_set2_flag(&cfg->mod_flags, 1, XMPP_AUTOPRUNE);
 	} else if (!strcasecmp(var->name, "autoregister")) {
 		ast_set2_flag(&cfg->flags, ast_true(var->value), XMPP_AUTOREGISTER);
-		ast_set2_flag(&cfg->mod_flags, 1, XMPP_AUTOREGISTER);
 	} else if (!strcasecmp(var->name, "auth_policy")) {
 		ast_set2_flag(&cfg->flags, !strcasecmp(var->value, "accept") ? 1 : 0, XMPP_AUTOACCEPT);
-		ast_set2_flag(&cfg->mod_flags, 1, XMPP_AUTOACCEPT);
 	} else if (!strcasecmp(var->name, "sendtodialplan")) {
 		ast_set2_flag(&cfg->flags, ast_true(var->value), XMPP_SEND_TO_DIALPLAN);
 	} else {
@@ -4606,7 +4657,7 @@
 	aco_option_register_custom(&cfg_info, "auth_policy", ACO_EXACT, global_options, "accept", global_bitfield_handler, 0);
 
 	aco_option_register(&cfg_info, "username", ACO_EXACT, client_options, NULL, OPT_STRINGFIELD_T, 0, STRFLDSET(struct ast_xmpp_client_config, user));
-	aco_option_register(&cfg_info, "secret", ACO_EXACT, client_options, NULL, OPT_STRINGFIELD_T, 0, STRFLDSET(struct ast_xmpp_client_config, password));
+	aco_option_register(&cfg_info, "secret", ACO_EXACT, client_options, NULL, OPT_STRINGFIELD_T, 0, STRFLDSET(struct ast_xmpp_client_config, refresh_token));
 	aco_option_register(&cfg_info, "serverhost", ACO_EXACT, client_options, NULL, OPT_STRINGFIELD_T, 0, STRFLDSET(struct ast_xmpp_client_config, server));
 	aco_option_register(&cfg_info, "statusmessage", ACO_EXACT, client_options, "Online and Available", OPT_STRINGFIELD_T, 0, STRFLDSET(struct ast_xmpp_client_config, statusmsg));
 	aco_option_register(&cfg_info, "pubsub_node", ACO_EXACT, client_options, NULL, OPT_STRINGFIELD_T, 0, STRFLDSET(struct ast_xmpp_client_config, pubsubnode));
@@ -4615,11 +4666,6 @@
 	aco_option_register(&cfg_info, "port", ACO_EXACT, client_options, "5222", OPT_UINT_T, 0, FLDSET(struct ast_xmpp_client_config, port));
 	aco_option_register(&cfg_info, "timeout", ACO_EXACT, client_options, "5", OPT_UINT_T, 0, FLDSET(struct ast_xmpp_client_config, message_timeout));
 
-	/* Global options that can be overridden per client must not specify a default */
-	aco_option_register_custom(&cfg_info, "autoprune", ACO_EXACT, client_options, NULL, client_bitfield_handler, 0);
-	aco_option_register_custom(&cfg_info, "autoregister", ACO_EXACT, client_options, NULL, client_bitfield_handler, 0);
-	aco_option_register_custom(&cfg_info, "auth_policy", ACO_EXACT, client_options, NULL, client_bitfield_handler, 0);
-
 	aco_option_register_custom(&cfg_info, "debug", ACO_EXACT, client_options, "no", client_bitfield_handler, 0);
 	aco_option_register_custom(&cfg_info, "type", ACO_EXACT, client_options, "client", client_bitfield_handler, 0);
 	aco_option_register_custom(&cfg_info, "distribute_events", ACO_EXACT, client_options, "no", client_bitfield_handler, 0);
@@ -4627,6 +4673,9 @@
 	aco_option_register_custom(&cfg_info, "usesasl", ACO_EXACT, client_options, "yes", client_bitfield_handler, 0);
 	aco_option_register_custom(&cfg_info, "forceoldssl", ACO_EXACT, client_options, "no", client_bitfield_handler, 0);
 	aco_option_register_custom(&cfg_info, "keepalive", ACO_EXACT, client_options, "yes", client_bitfield_handler, 0);
+	aco_option_register_custom(&cfg_info, "autoprune", ACO_EXACT, client_options, "no", client_bitfield_handler, 0);
+	aco_option_register_custom(&cfg_info, "autoregister", ACO_EXACT, client_options, "yes", client_bitfield_handler, 0);
+	aco_option_register_custom(&cfg_info, "auth_policy", ACO_EXACT, client_options, "accept", client_bitfield_handler, 0);
 	aco_option_register_custom(&cfg_info, "sendtodialplan", ACO_EXACT, client_options, "no", client_bitfield_handler, 0);
 	aco_option_register_custom(&cfg_info, "status", ACO_EXACT, client_options, "available", client_status_handler, 0);
 	aco_option_register_custom(&cfg_info, "buddy", ACO_EXACT, client_options, NULL, client_buddy_handler, 0);
@@ -4665,7 +4714,6 @@
 }
 
 AST_MODULE_INFO(ASTERISK_GPL_KEY, AST_MODFLAG_GLOBAL_SYMBOLS | AST_MODFLAG_LOAD_ORDER, "Asterisk XMPP Interface",
-	.support_level = AST_MODULE_SUPPORT_CORE,
 	.load = load_module,
 	.unload = unload_module,
 	.reload = reload,
